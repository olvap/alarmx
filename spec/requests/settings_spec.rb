require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/setting", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Setting. As you add validations to Setting, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { chat_id: '123123' }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  context "when user is logged in" do
    let!(:user) { FactoryBot.create(:user) }

    before { sign_in user }

    describe "GET /index" do
      it "renders a successful response" do
        user.setting
        get setting_url
        expect(response).to be_successful
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        setting = user.setting
        get setting_url
        expect(response).to be_successful
      end
    end

    describe "GET /edit" do
      it "renders a successful response" do
        setting = user.setting
        get edit_setting_url(setting)
        expect(response).to be_successful
      end
    end

    describe "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested setting" do
          setting = user.setting
          patch setting_url, params: { setting: new_attributes }
          setting.reload
          skip("Add assertions for updated state")
        end

        it "redirects to the setting" do
          setting = user.setting
          patch setting_url, params: { setting: new_attributes }
          setting.reload
          expect(response).to redirect_to(setting_url(setting))
        end
      end

      context "with invalid parameters" do

        it "renders a response with 422 status (i.e. to display the 'edit' template)" do
          setting = user.setting
          patch setting_url, params: { setting: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
        end

      end
    end

    describe "DELETE /destroy" do
      it "redirects to the setting list" do
        skip
        setting = user.setting
        delete setting_url
        expect(response).to redirect_to(setting_url)
      end
    end
  end
end
