require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/emitters", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Emitter. As you add validations to Emitter, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'DoorEmitter' }
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  context "when user is logged in" do
    let(:building) { create(:building, user: user) }
    let!(:user) { FactoryBot.create(:user) }

    before { sign_in user }
    describe "GET /index" do
      it "renders a successful response" do
        create(:emitter, valid_attributes.merge(building: building) )
        get building_emitters_url(building)
        expect(response).to be_successful
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        emitter = create(:emitter, valid_attributes.merge(building: building) )
        get building_emitter_url(building, emitter)
        expect(response).to be_successful
      end
    end

    describe "GET /new" do
      it "renders a successful response" do
        get new_building_emitter_url(building)
        expect(response).to be_successful
      end
    end

    describe "GET /edit" do
      it "renders a successful response" do
        emitter = create(:emitter, valid_attributes.merge(building: building) )
        get edit_building_emitter_url(building, emitter)
        expect(response).to be_successful
      end
    end

    describe "POST /create" do
      context "with valid parameters" do
        it "creates a new Emitter" do
          expect {
            post building_emitters_url(building), params: { emitter: valid_attributes }
          }.to change(Emitter, :count).by(1)
        end

        it "redirects to the created emitter" do
          post building_emitters_url(building), params: { emitter: valid_attributes }
          expect(response).to redirect_to(building_emitter_url(building, Emitter.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Emitter" do
          expect {
            post building_emitters_url(building), params: { emitter: invalid_attributes }
          }.to change(Emitter, :count).by(0)
        end


        it "renders a response with 422 status (i.e. to display the 'new' template)" do
          post building_emitters_url(building), params: { emitter: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
        end

      end
    end

    describe "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested emitter" do
          emitter = create(:emitter, valid_attributes.merge(building: building))
          patch building_emitter_url(building, emitter), params: { emitter: new_attributes }
          emitter.reload
          skip("Add assertions for updated state")
        end

        it "redirects to the emitter" do
          emitter = create(:emitter, valid_attributes.merge(building: building))
          patch building_emitter_url(building, emitter), params: { emitter: new_attributes }
          emitter.reload
          expect(response).to redirect_to(building_emitter_url(building, emitter))
        end
      end

      context "with invalid parameters" do

        it "renders a response with 422 status (i.e. to display the 'edit' template)" do
          emitter = create(:emitter, valid_attributes.merge(building: building))
          patch building_emitter_url(building, emitter), params: { emitter: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
        end

      end
    end

    describe "DELETE /destroy" do
      it "destroys the requested emitter" do
        emitter = create(:emitter, valid_attributes.merge(building: building))
        expect {
          delete building_emitter_url(building, emitter)
        }.to change(Emitter, :count).by(-1)
      end

      it "redirects to the emitters list" do
        emitter = create(:emitter, valid_attributes.merge(building: building))
        delete building_emitter_url(building, emitter)
        expect(response).to redirect_to(building_emitters_url(building))
      end
    end
  end
end
