require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api_credentials", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # ApiCredential. As you add validations to ApiCredential, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {}
  }

  let(:invalid_attributes) {
    { name: 'foo' }
  }

  context "when user is logged in" do
    let(:user) { FactoryBot.create(:user) }

    before { sign_in user }

    describe "GET /index" do
      it "renders a successful response" do
        user.api_credentials.create valid_attributes
        get api_credentials_url
        expect(response).to be_successful
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        api_credential = user.api_credentials.create valid_attributes
        get api_credential_url(api_credential)
        expect(response).to be_successful
      end
    end

    describe "GET /new" do
      it "renders a successful response" do
        get new_api_credential_url
        expect(response).to be_successful
      end
    end

    describe "POST /create" do
      context "with valid parameters" do
        it "creates a new ApiCredential" do
          expect {
            post api_credentials_url, params: { api_credential: valid_attributes }
          }.to change(ApiCredential, :count).by(1)
        end

        it "redirects to the created api_credential" do
          post api_credentials_url, params: { api_credential: valid_attributes }
          expect(response).to redirect_to(api_credential_url(ApiCredential.last))
        end
      end
    end

    describe "DELETE /destroy" do
      it "destroys the requested api_credential" do
        api_credential = user.api_credentials.create valid_attributes
        expect {
          delete api_credential_url(api_credential)
        }.to change(ApiCredential, :count).by(-1)
      end

      it "redirects to the api_credentials list" do
        api_credential = user.api_credentials.create valid_attributes
        delete api_credential_url(api_credential)
        expect(response).to redirect_to(api_credentials_url)
      end
    end
  end
end
